const router = require("express").Router();
const WebSocket = require("ws");
const path = require('path');
const WeatherStats = require("../../models/WeatherStats.model");

// router.get("/temperature", (req, res) => {
//     let masterBedroom = [];
//     let livingRoom = [];
//     // getStatsFromDB('masterBedroom', function(result) {
//     //     masterBedroom.concat(result.arrayStats.roomId);
//     // });
//     // livingRoom = getStatsFromDB('livingRoom', function(result) {
//     //     return result.arrayStats;
//     // });
//     let stream = getJediStream("24:62:AB:F9:12:58");
//     stream.on('data', function(jedis){
//         masterBedroom.push([jedis.createdAt, jedis.temp])
//     });
//     stream.on('error', function(error){
//         console.log(error);
//     });
//     console.log("master room data is: " + getStats('masterBedroom'));
//     console.log("living room data is: " + livingRoom.length.toString());
//     // let masterBedroom = [["2020-08-31T16:43:38.509Z",23.96],["2020-08-31T16:43:43.776Z",23.97],["2020-08-31T16:45:04.088Z",29.45],["2020-08-31T16:45:29.490Z",31.54],["2020-08-31T16:47:42.687Z",26.45],["2020-08-31T18:12:26.917Z",22.52],["2020-08-31T18:27:12.656Z",23.17],["2020-08-31T18:42:20.945Z",23.31],["2020-08-31T18:57:30.610Z",24],["2020-08-31T19:12:39.631Z",23.96],["2020-08-31T19:27:48.154Z",23.58],["2020-08-31T19:42:57.028Z",23.22],["2020-08-31T19:58:05.731Z",22.97],["2020-08-31T20:13:14.522Z",22.87],["2020-08-31T20:28:23.031Z",22.73],["2020-08-31T20:43:31.329Z",22.61],["2020-08-31T20:58:40.380Z",22.45],["2020-08-31T21:13:49.501Z",22.33],["2020-08-31T21:28:58.022Z",22.23],["2020-08-31T21:44:06.841Z",22.1],["2020-08-31T21:59:15.557Z",21.96],["2020-08-31T22:14:24.893Z",22.13],["2020-08-31T22:29:33.913Z",22.36],["2020-08-31T22:44:42.725Z",22.7],["2020-08-31T22:59:51.875Z",22.69],["2020-08-31T23:15:00.525Z",22.62],["2020-08-31T23:30:08.971Z",22.52],["2020-08-31T23:45:17.490Z",22.37],["2020-09-01T00:00:25.939Z",22.23],["2020-09-01T00:15:34.757Z",22.12],["2020-09-01T00:30:43.805Z",22.01],["2020-09-01T00:45:52.299Z",21.89],["2020-09-01T01:01:01.795Z",21.76],["2020-09-01T01:16:09.944Z",21.65],["2020-09-01T01:31:18.561Z",21.57],["2020-09-01T01:46:27.686Z",21.55],["2020-09-01T02:01:36.922Z",21.6],["2020-09-01T02:16:45.591Z",21.73],["2020-09-01T02:31:54.565Z",21.77],["2020-09-01T02:47:03.700Z",21.75],["2020-09-01T03:02:12.742Z",21.74],["2020-09-01T03:17:21.852Z",21.69],["2020-09-01T03:32:30.622Z",21.64],["2020-09-01T03:47:38.578Z",21.53],["2020-09-01T04:02:47.577Z",21.5],["2020-09-01T04:17:57.046Z",21.52],["2020-09-01T04:33:05.552Z",21.46],["2020-09-01T04:48:14.278Z",21.33],["2020-09-01T05:03:22.581Z",21.2],["2020-09-01T05:18:31.204Z",21.08],["2020-09-01T05:33:39.720Z",21],["2020-09-01T05:48:48.745Z",20.9],["2020-09-01T06:03:57.370Z",20.83],["2020-09-01T06:19:05.876Z",20.89],["2020-09-01T06:34:15.005Z",20.97],["2020-09-01T06:49:23.633Z",20.99],["2020-09-01T07:04:32.261Z",20.96],["2020-09-01T07:19:40.977Z",20.97],["2020-09-01T07:34:49.587Z",20.98],["2020-09-01T07:49:58.412Z",20.97],["2020-09-01T08:05:06.998Z",20.94],["2020-09-01T08:20:15.468Z",20.98],["2020-09-01T08:35:24.464Z",21.11],["2020-09-01T08:50:32.944Z",21.11],["2020-09-01T09:05:41.974Z",21.1],["2020-09-01T09:20:50.992Z",21.32],["2020-09-01T09:35:59.718Z",21.41],["2020-09-01T09:51:08.320Z",21.55],["2020-09-01T10:06:17.198Z",21.54],["2020-09-01T10:21:25.812Z",21.62],["2020-09-01T10:36:34.432Z",21.69],["2020-09-01T10:51:43.664Z",21.79],["2020-09-01T11:06:52.633Z",21.77],["2020-09-01T11:22:01.713Z",21.78],["2020-09-01T11:37:10.546Z",21.86],["2020-09-01T11:52:19.679Z",21.92],["2020-09-01T12:07:28.183Z",21.97],["2020-09-01T12:22:36.788Z",22.06],["2020-09-01T12:37:45.526Z",22.12],["2020-09-01T12:52:53.795Z",22.08],["2020-09-01T13:08:02.579Z",22.1],["2020-09-01T13:23:11.413Z",22.14],["2020-09-01T13:38:20.218Z",22.17],["2020-09-01T13:53:28.927Z",22.11],["2020-09-01T14:08:37.645Z",22.06],["2020-09-01T14:23:46.051Z",22.04],["2020-09-01T14:38:54.770Z",22.05],["2020-09-01T14:54:03.242Z",22.01],["2020-09-01T15:09:11.801Z",21.96],["2020-09-01T15:24:20.555Z",22.08],["2020-09-01T15:39:29.578Z",22.04],["2020-09-01T15:54:38.780Z",22.25],["2020-09-01T16:09:47.800Z",22.5],["2020-09-01T16:24:56.731Z",22.51],["2020-09-01T16:40:05.322Z",22.55],["2020-09-01T16:55:13.667Z",22.3],["2020-09-01T17:10:21.974Z",22.2],["2020-09-01T17:25:30.489Z",22.26],["2020-09-01T17:40:38.702Z",22.29],["2020-09-01T17:55:47.516Z",22.39],["2020-09-01T18:10:56.219Z",22.45],["2020-09-01T18:26:04.663Z",22.52],["2020-09-01T18:41:13.073Z",22.56],["2020-09-01T18:56:21.790Z",24.31],["2020-09-01T19:11:31.084Z",25.56],["2020-09-01T19:26:41.477Z",24.13],["2020-09-01T19:41:50.610Z",23.81],["2020-09-01T19:56:58.617Z",23.64],["2020-09-01T20:12:07.127Z",23.49],["2020-09-01T20:27:16.154Z",23.41],["2020-09-01T20:42:24.759Z",23.37],["2020-09-01T20:57:33.695Z",23.4],["2020-09-01T21:12:42.010Z",23.15],["2020-09-01T21:27:50.112Z",23.12],["2020-09-01T21:42:58.631Z",23.03],["2020-09-01T21:58:07.449Z",22.98],["2020-09-01T22:13:16.358Z",22.67],["2020-09-01T22:28:24.462Z",22.66],["2020-09-01T22:43:33.206Z",22.65],["2020-09-01T22:58:42.386Z",22.56],["2020-09-01T23:13:50.744Z",22.35],["2020-09-01T23:28:59.598Z",22.35],["2020-09-01T23:44:08.405Z",22.3],["2020-09-01T23:59:17.108Z",22.22],["2020-09-02T00:14:25.810Z",22.17],["2020-09-02T00:29:34.520Z",22.08],["2020-09-02T00:44:43.273Z",22.03],["2020-09-02T00:59:52.093Z",21.95],["2020-09-02T01:15:00.860Z",21.76],["2020-09-02T01:30:09.467Z",21.62],["2020-09-02T01:45:18.382Z",21.49],["2020-09-02T02:00:27.079Z",21.37],["2020-09-02T02:15:35.691Z",21.24],["2020-09-02T02:30:43.505Z",21.12],["2020-09-02T02:45:51.803Z",20.98],["2020-09-02T03:01:00.114Z",20.88],["2020-09-02T03:16:09.143Z",20.78],["2020-09-02T03:31:18.366Z",20.66],["2020-09-02T03:46:26.881Z",20.54],["2020-09-02T04:01:35.096Z",20.45],["2020-09-02T04:16:43.806Z",20.38],["2020-09-02T04:31:52.526Z",20.28],["2020-09-02T04:47:00.848Z",20.19],["2020-09-02T05:02:09.055Z",20.09],["2020-09-02T05:17:17.544Z",20.03],["2020-09-02T05:32:26.094Z",19.96],["2020-09-02T05:47:34.706Z",19.88],["2020-09-02T06:02:43.490Z",19.82],["2020-09-02T06:17:52.657Z",20.03],["2020-09-02T06:33:00.717Z",20.12],["2020-09-02T06:48:09.643Z",20.12],["2020-09-02T07:03:18.513Z",20.12],["2020-09-02T07:18:27.339Z",20.15],["2020-09-02T07:33:35.892Z",20.13],["2020-09-02T07:48:44.670Z",20.1],["2020-09-02T08:03:53.291Z",20.26],["2020-09-02T08:19:01.700Z",20.43],["2020-09-02T08:34:10.730Z",20.64],["2020-09-02T08:49:19.450Z",20.58],["2020-09-02T09:04:28.291Z",20.58],["2020-09-02T09:19:36.890Z",20.61],["2020-09-02T09:34:45.717Z",20.61],["2020-09-02T09:49:54.432Z",20.93],["2020-09-02T10:05:03.538Z",21.31],["2020-09-02T10:20:12.354Z",21.22],["2020-09-02T10:35:21.072Z",21.34],["2020-09-02T10:50:29.620Z",21.35],["2020-09-02T11:05:38.299Z",21.17],["2020-09-02T11:20:47.164Z",21.21],["2020-09-02T11:35:55.604Z",21.26],["2020-09-02T11:51:03.992Z",21.27],["2020-09-02T12:06:13.112Z",21.25],["2020-09-02T12:21:21.731Z",21.29],["2020-09-02T12:36:30.462Z",21.31],["2020-09-02T12:51:39.140Z",21.41],["2020-09-02T13:06:47.837Z",21.5],["2020-09-02T13:21:55.929Z",21.58],["2020-09-02T13:37:04.537Z",21.6],["2020-09-02T13:52:14.020Z",21.67],["2020-09-02T14:07:23.413Z",22.3],["2020-09-02T14:22:32.316Z",22.57],["2020-09-02T14:37:41.429Z",22.67],["2020-09-02T14:52:49.573Z",22.61],["2020-09-02T15:07:57.891Z",22.59],["2020-09-02T15:23:06.589Z",22.55],["2020-09-02T15:38:14.079Z",22.05],["2020-09-02T15:53:21.880Z",21.86],["2020-09-02T16:08:30.094Z",21.66],["2020-09-02T16:23:38.388Z",21.58],["2020-09-02T16:38:47.108Z",21.72],["2020-09-02T16:53:56.724Z",22.08],["2020-09-02T17:09:05.985Z",22.38],["2020-09-02T17:24:14.709Z",22.57],["2020-09-02T17:39:23.676Z",22.98],["2020-09-02T17:54:32.051Z",22.98],["2020-09-02T18:09:40.561Z",22.96],["2020-09-02T18:24:49.183Z",22.75],["2020-09-02T18:39:57.691Z",22.69],["2020-09-02T18:55:06.938Z",22.66],["2020-09-02T19:10:15.343Z",22.62],["2020-09-02T19:25:24.166Z",22.56],["2020-09-02T19:40:32.663Z",22.57],["2020-09-02T19:55:40.944Z",22.49],["2020-09-02T20:10:49.567Z",22.39],["2020-09-02T20:25:58.373Z",22.3],["2020-09-02T20:41:06.878Z",22.29],["2020-09-02T20:56:15.963Z",22.22],["2020-09-02T21:11:24.414Z",22.11],["2020-09-02T21:26:33.213Z",22.05],["2020-09-02T21:41:42.029Z",22.04],["2020-09-02T21:56:50.252Z",22],["2020-09-02T22:11:58.433Z",21.94],["2020-09-02T22:27:06.831Z",21.89],["2020-09-02T22:42:15.070Z",21.89]];
//     // let livingRoom = [["2020-08-31T15:52:42.873Z",23.27],["2020-08-31T15:52:57.867Z",23.28],["2020-08-31T16:14:13.575Z",25],["2020-08-31T16:29:13.764Z",23.04],["2020-08-31T16:44:21.894Z",22.81],["2020-08-31T16:59:29.432Z",22.74],["2020-08-31T17:14:37.311Z",22.81],["2020-08-31T17:29:45.295Z",22.76],["2020-08-31T17:44:53.186Z",22.62],["2020-08-31T18:00:01.294Z",22.54],["2020-08-31T18:15:09.706Z",22.48],["2020-08-31T18:30:17.485Z",22.4],["2020-08-31T18:45:24.987Z",22.35],["2020-08-31T19:00:32.950Z",22.31],["2020-08-31T19:15:41.393Z",22.29],["2020-08-31T19:30:49.751Z",22.24],["2020-08-31T19:45:57.856Z",22.19],["2020-08-31T20:01:05.807Z",22.14],["2020-08-31T20:16:14.126Z",22.26],["2020-08-31T20:31:22.752Z",22.29],["2020-08-31T20:46:31.147Z",22.3],["2020-08-31T21:01:39.232Z",22.31],["2020-08-31T21:16:47.348Z",22.28],["2020-08-31T21:31:56.029Z",22.29],["2020-08-31T21:47:04.223Z",22.27],["2020-08-31T22:02:12.061Z",22.28],["2020-08-31T22:17:20.789Z",22.43],["2020-08-31T22:32:29.396Z",22.63],["2020-08-31T22:47:37.706Z",22.92],["2020-08-31T23:02:46.324Z",22.97],["2020-08-31T23:17:54.554Z",23.02],["2020-08-31T23:33:02.638Z",22.97],["2020-08-31T23:48:10.846Z",23.14],["2020-09-01T00:03:19.609Z",23.16],["2020-09-01T00:18:27.228Z",23.16],["2020-09-01T00:33:35.439Z",23.19],["2020-09-01T00:48:43.727Z",23.15],["2020-09-01T01:03:52.066Z",23.17],["2020-09-01T01:18:59.812Z",23.18],["2020-09-01T01:34:07.663Z",23.18],["2020-09-01T01:49:16.005Z",23.26],["2020-09-01T02:04:23.590Z",23.5],["2020-09-01T02:19:31.997Z",23.69],["2020-09-01T02:34:40.448Z",23.71],["2020-09-01T02:49:48.382Z",23.69],["2020-09-01T03:04:56.689Z",23.73],["2020-09-01T03:20:04.802Z",23.67],["2020-09-01T03:35:12.672Z",23.61],["2020-09-01T03:50:20.284Z",23.59],["2020-09-01T04:05:28.446Z",23.7],["2020-09-01T04:20:36.028Z",23.76],["2020-09-01T04:35:43.977Z",23.61],["2020-09-01T04:50:52.289Z",23.55],["2020-09-01T05:06:00.289Z",23.56],["2020-09-01T05:21:08.416Z",23.55],["2020-09-01T05:36:16.015Z",23.38],["2020-09-01T05:51:24.212Z",23.26],["2020-09-01T06:06:31.993Z",23.16],["2020-09-01T06:21:39.985Z",23.1],["2020-09-01T06:36:48.907Z",22.98],["2020-09-01T06:51:56.830Z",22.91],["2020-09-01T07:07:04.831Z",22.74],["2020-09-01T07:22:13.633Z",22.7],["2020-09-01T07:37:21.531Z",22.64],["2020-09-01T07:52:29.934Z",22.52],["2020-09-01T08:07:37.841Z",22.47],["2020-09-01T08:22:46.039Z",22.35],["2020-09-01T08:37:54.039Z",22.31],["2020-09-01T08:53:01.837Z",22.26],["2020-09-01T09:08:10.247Z",22.21],["2020-09-01T09:23:18.047Z",22.11],["2020-09-01T09:38:26.554Z",22.04],["2020-09-01T09:53:34.761Z",21.96],["2020-09-01T10:08:42.787Z",21.9],["2020-09-01T10:23:50.253Z",21.87],["2020-09-01T10:38:58.560Z",21.82],["2020-09-01T10:54:06.454Z",21.75],["2020-09-01T11:09:14.362Z",21.82],["2020-09-01T11:24:22.566Z",21.75],["2020-09-01T11:39:30.871Z",21.71],["2020-09-01T11:54:38.872Z",21.68],["2020-09-01T12:09:46.672Z",21.76],["2020-09-01T12:24:55.034Z",21.85],["2020-09-01T12:40:03.045Z",21.85],["2020-09-01T12:55:10.697Z",21.85],["2020-09-01T13:10:19.301Z",21.85],["2020-09-01T13:25:27.905Z",21.85],["2020-09-01T13:40:36.209Z",21.95],["2020-09-01T13:55:44.020Z",22],["2020-09-01T14:10:51.494Z",22.03],["2020-09-01T14:25:59.820Z",22.09],["2020-09-01T14:41:07.544Z",22.15],["2020-09-01T14:56:15.805Z",22.23],["2020-09-01T15:11:23.542Z",22.22],["2020-09-01T15:26:31.710Z",22.28],["2020-09-01T15:41:39.702Z",22.31],["2020-09-01T15:56:48.427Z",22.36],["2020-09-01T16:11:57.443Z",22.55],["2020-09-01T16:27:05.750Z",22.46],["2020-09-01T16:42:13.927Z",22.49],["2020-09-01T16:57:21.514Z",22.4],["2020-09-01T17:12:29.805Z",22.42],["2020-09-01T17:27:37.858Z",22.41],["2020-09-01T17:42:45.885Z",22.38],["2020-09-01T17:57:54.273Z",22.36],["2020-09-01T18:13:02.172Z",22.36],["2020-09-01T18:28:10.483Z",22.35],["2020-09-01T18:43:18.495Z",22.34],["2020-09-01T18:58:26.471Z",22.31],["2020-09-01T19:13:34.276Z",22.3],["2020-09-01T19:28:43.097Z",22.29],["2020-09-01T19:43:51.714Z",22.36],["2020-09-01T19:59:00.121Z",22.52],["2020-09-01T20:14:08.333Z",22.55],["2020-09-01T20:29:16.229Z",22.62],["2020-09-01T20:44:23.651Z",22.67],["2020-09-01T20:59:31.848Z",22.55],["2020-09-01T21:14:39.817Z",22.61],["2020-09-01T21:29:47.610Z",22.63],["2020-09-01T21:44:54.885Z",22.61],["2020-09-01T22:00:03.175Z",22.64],["2020-09-01T22:15:11.307Z",22.61],["2020-09-01T22:30:19.718Z",22.59],["2020-09-01T22:45:27.517Z",22.63],["2020-09-01T23:00:35.132Z",22.69],["2020-09-01T23:15:44.343Z",22.63],["2020-09-01T23:30:52.542Z",22.62],["2020-09-01T23:46:01.054Z",22.59],["2020-09-02T00:01:09.035Z",22.59],["2020-09-02T00:16:17.160Z",22.58],["2020-09-02T00:31:25.114Z",22.56],["2020-09-02T00:46:32.957Z",22.62],["2020-09-02T01:01:40.797Z",22.8],["2020-09-02T01:16:49.060Z",22.88],["2020-09-02T01:31:57.268Z",22.79],["2020-09-02T01:47:05.671Z",22.78],["2020-09-02T02:02:13.679Z",22.79],["2020-09-02T02:17:22.226Z",22.77],["2020-09-02T02:32:30.088Z",22.78],["2020-09-02T02:47:38.093Z",22.77],["2020-09-02T03:02:46.306Z",22.75],["2020-09-02T03:17:54.501Z",22.73],["2020-09-02T03:33:02.512Z",22.83],["2020-09-02T03:48:10.710Z",22.92],["2020-09-02T04:03:18.105Z",22.92],["2020-09-02T04:18:26.505Z",22.94],["2020-09-02T04:33:35.051Z",22.94],["2020-09-02T04:48:42.929Z",22.82],["2020-09-02T05:03:51.322Z",22.77],["2020-09-02T05:18:59.635Z",22.74],["2020-09-02T05:34:07.841Z",22.8],["2020-09-02T05:49:16.050Z",22.9],["2020-09-02T06:04:23.743Z",22.85],["2020-09-02T06:19:31.732Z",22.69],["2020-09-02T06:34:39.940Z",22.68],["2020-09-02T06:49:47.845Z",22.66],["2020-09-02T07:04:55.742Z",22.62],["2020-09-02T07:20:04.150Z",22.64],["2020-09-02T07:35:12.621Z",22.83],["2020-09-02T07:50:20.911Z",22.9],["2020-09-02T08:20:55.804Z",22.51],["2020-09-02T08:36:03.294Z",22.34],["2020-09-02T08:51:11.278Z",22.42],["2020-09-02T09:06:18.785Z",22.28],["2020-09-02T09:21:26.171Z",22.32],["2020-09-02T09:36:33.638Z",22.33],["2020-09-02T09:51:41.653Z",22.32],["2020-09-02T10:06:49.125Z",22.32],["2020-09-02T10:21:56.963Z",22.31],["2020-09-02T10:37:04.746Z",22.3],["2020-09-02T10:52:12.197Z",22.29],["2020-09-02T11:07:19.565Z",22.36],["2020-09-02T11:22:27.618Z",22.43],["2020-09-02T11:37:35.209Z",22.47],["2020-09-02T11:52:43.343Z",22.52],["2020-09-02T12:07:51.429Z",22.56],["2020-09-02T12:22:59.316Z",22.6],["2020-09-02T12:38:06.997Z",22.75],["2020-09-02T12:53:15.934Z",22.8],["2020-09-02T13:08:24.029Z",23.2],["2020-09-02T13:23:31.676Z",22.91],["2020-09-02T13:38:39.522Z",22.52],["2020-09-02T13:53:47.525Z",22.7],["2020-09-02T14:08:55.828Z",22.65],["2020-09-02T14:24:03.524Z",22.61],["2020-09-02T14:39:11.736Z",22.57],["2020-09-02T14:54:19.628Z",22.53],["2020-09-02T15:09:26.921Z",22.49],["2020-09-02T15:24:34.685Z",22.5],["2020-09-02T15:39:42.814Z",22.63],["2020-09-02T15:54:50.871Z",22.7],["2020-09-02T16:09:58.661Z",22.7],["2020-09-02T16:25:05.732Z",22.64],["2020-09-02T16:40:13.794Z",22.6],["2020-09-02T16:55:21.283Z",22.61],["2020-09-02T17:10:28.278Z",22.57],["2020-09-02T17:25:36.261Z",22.57],["2020-09-02T17:40:44.564Z",22.57],["2020-09-02T17:55:52.155Z",22.56],["2020-09-02T18:11:00.252Z",22.55],["2020-09-02T18:26:08.649Z",22.54],["2020-09-02T18:41:16.572Z",22.54],["2020-09-02T18:56:24.550Z",22.53],["2020-09-02T19:11:31.956Z",22.51],["2020-09-02T19:26:39.961Z",22.5],["2020-09-02T19:41:48.009Z",22.48],["2020-09-02T20:12:22.023Z",22.62],["2020-09-02T20:27:29.510Z",22.67],["2020-09-02T20:42:37.087Z",22.67],["2020-09-02T20:57:44.651Z",22.68],["2020-09-02T21:12:52.244Z",22.71],["2020-09-02T21:28:00.134Z",22.72],["2020-09-02T21:43:08.232Z",22.74],["2020-09-02T21:58:16.049Z",22.74],["2020-09-02T22:13:23.715Z",22.74],["2020-09-02T22:43:39.319Z",22.86]];
//     res.render("index", {
//         masterBedroom: JSON.stringify(masterBedroom),
//         livingRoom: JSON.stringify(livingRoom),
//     });
// });

// router.get("/humidity", (req, res) => {
//     res.render("about", {title: "Hey", message: "Hello there, humidity!"});
// });
//
// router.get("/pressure", (req, res) => {
//     res.render("about", {title: "Hey", message: "Hello there, pressure!"});
// });
//
// router.get("/altitude", (req, res) => {
//     res.render("about", {title: "Hey", message: "Hello there, altitude!"});
// });
//
// const getStats = (roomId) => {
//     let arrayStats = [];
//     let promise = getStatsFromDB(roomId);
//     promise.then((result) => {
//         arrayStats.concat(result);
//         console.log('getStats:: ' + arrayStats.length.toString())
//     });
//     // let arrayStats = {roomId: []};
//     // allStats.forEach(
//     //     element => {
//     //         arrayStats.roomId.push([element.createdAt, parseFloat(element.temp)]);
//     //     });
//     // callback({arrayStats: arrayStats});
// };
//
// const getStatsFromDB = (roomId) => {
//     let rooms = {masterBedroom: "24:62:AB:F9:12:58",
//         livingRoom: "24:0A:C4:60:FF:10"};
//     console.log('room is:: ' + rooms[roomId]);
//
//     let promise = WeatherStats.find({"macAddress": rooms[roomId]},
//         {'createdAt': 1, 'temp': 1, '_id': 0}).exec();
//     return promise;
// };
//
// const getCategoriesTime = () => {
//     const x = 60; //minutes interval
//     const times = []; // time array
//     let tt = 0; // start time
//     const ap = ['AM', 'PM']; // AM-PM
//
// //loop to increment the time and push results in array
//     for (let i = 0; tt < 24 * 60; i++) {
//         const hh = Math.floor(tt / 60); // getting hours of day in 0-24 format
//         const mm = (tt % 60); // getting minutes of the hour in 0-55 format
//         times[i] = ("0" + (hh % 24)).slice(-2) + ':' + ("0" + mm).slice(-2) + ap[Math.floor(hh / 12)]; // pushing data in array in [00:00 - 12:00 AM/PM format]
//         tt += x;
//     }
//
//     return times;
// };
//
// const generateTemps = () => {
//     const ARRAY_LENGTH = 96;
//     const randomArray = [];
//     for (let i = 0; i < ARRAY_LENGTH; i++) {
//         randomArray.push(Math.random())
//     }
//     return randomArray;
// };
//broadcast back to clients
// const broadcast = (clients, message) => {
//
//     clients.forEach((client) => {
//
//         if (client.readyState === WebSocket.OPEN) {
//
//             client.send(message);
//         }
//     });
// };
//
// router.get("/getStats", (req, res) => {
//
//     broadcast(req.app.locals.clients, "get Stats invoked!");
//
//     return res.sendStatus(200);
// });
//
// router.get("/dog", (req, res) => {
//
//     broadcast(req.app.locals.clients, "Bark!");
//
//     return res.sendStatus(200);
// });

// function getJediStream(macAddress){
//     let stream = WeatherStats.find({"macAddress": macAddress,
//             createdAt: {$gt: new Date(Date.now() - 24*60*60 * 1000) }},
//         {'createdAt': 1, 'temp': 1, '_id': 0}).stream();
//     return stream;
// }
//
//



//=================================================================================================
// changes from Rich
let rooms = {masterBedroom: "24:62:AB:F9:12:58",
    // livingRoom: "24:0A:C4:60:FF:10",
    livingRoom: "D8:BF:C0:14:10:DD",
    secondBedroom: "D8:BF:C0:14:82:A8"};
router.get("/temperature", (req, res) => {
    let masterBedroom = [];
    let livingRoom = [];

    getStats().then((result) => {
        result.forEach(function (item) {
            if (rooms['masterBedroom'] == item.macAddress) {
                masterBedroom.push([new Date(item.createdAt.toString()), parseFloat(item.temp.toString())])
            }
            if (rooms['livingRoom'] == item.macAddress) {
                livingRoom.push([new Date(item.createdAt.toString()), parseFloat(item.temp.toString())])
            }
        });
        console.log(livingRoom.length.toString());
        res.render("temperature", {
            masterBedroom: JSON.stringify(masterBedroom),
            livingRoom: JSON.stringify(livingRoom),
        });

    });
});

router.get("/humidity", (req, res) => {
    let masterBedroom = [];
    let livingRoom = [];

    getStats().then((result) => {
        result.forEach(function (item) {
            if (rooms['masterBedroom'] == item.macAddress) {
                masterBedroom.push([new Date(item.createdAt.toString()), parseFloat(item.humidity.toString())])
            }
            if (rooms['livingRoom'] == item.macAddress) {
                livingRoom.push([new Date(item.createdAt.toString()), parseFloat(item.humidity.toString())])
            }
        });
        console.log(livingRoom.length.toString());
        res.render("humidity", {
            masterBedroom: JSON.stringify(masterBedroom),
            livingRoom: JSON.stringify(livingRoom),
        });

    });
});

router.get('/', (req, res) => {
    res.render('get_stats');
})

const getStats = () => {
    let promise = getStatsFromDB();
    return promise.then((result) => {
        return result;
    });
};
const getStatsFromDB = () => {

    let roomsId = ["24:0A:C4:60:FF:10", "24:62:AB:F9:12:58", "D8:BF:C0:14:82:A8", "D8:BF:C0:14:10:DD"];
    let promise = WeatherStats.find({"macAddress": {'$in': roomsId}, "createdAt":{$gt:new Date(Date.now() - 24*60*60 * 1000)}},
        {'createdAt': 1, 'humidity': 1, 'temp': 1, 'macAddress': 1, '_id': 0}).sort({ 'createdAt' : -1 }).exec();
    return promise.then((result) => {
        return result;
    });
};

module.exports = router;
